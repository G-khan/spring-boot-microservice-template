# docker-compose.yml
version: "3.8"
services:
  app:
    container_name: "template_app"
    image: spring-boot-ms-template
    build:
      context: ./
      dockerfile: Dockerfile
    volumes:
      - /data/spring-boot-ms-template
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - mongo
    links:
      - mongo
      - kafka
      - zookeeper
  zookeeper:
    container_name: "zookeeper"
    image: wurstmeister/zookeeper
    expose:
      - "2181"
  kafka:
    image: wurstmeister/kafka
    container_name: "kafka"
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "templateEvent:1:1,otherTemplate:1:1:compact"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CONTROLLER_SHUTDOWN_ENABLE: 'true'
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: 'true'
      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: 1
    depends_on:
      - zookeeper
    volumes:
      - ./:/etc/kafka
  mongo:
    image: mongo:latest
    container_name: "mongo"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: test123
      MONGO_INITDB_DATABASE: template
    ports:
      - 27017:27017
    volumes:
      - mongodata:/data/db

networks:
  internal:

volumes:
  mongodata: